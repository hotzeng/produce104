1. Mailbox:
one queue, two pointers, two semaphores: fullBuffer, emptyBuffer,
mutex
usage count


2. Process Management:
(1) how will spawn work: 
(Need a static variable to indicate how many PCBs has been initialized. get a pid from a static variable, get new stack by calling new_stack() function. )

get entry point by ramdisk_find()
search through pcb array to find exited process, assign to child process this pid
put it into ready queue and add to the total_ready_priority.  

(2) how will wait work:
write in the PCB of the process who is waiting for him to exit, then call block() to schedule a new task and go on the block queue.

(3) how will kill work:
status will be changed to EXITED
If it is on the ready queue, update total priority to exclude its value.
See if any process is waiting for it by looking at its pcb->waiting_queue.
barrier->size-- if necessary
close mailbox
then exit if is current running

(4) how to avoid intefering other tasks:
when pop any queue, such as ready queue, block queue, sleep queue, check if its status is exist (which implied that it is killed or exits normally). If so, keep poping the next from the queue. So we need to change the unblock_one function.


changed a few queue_put stuff:in unblock(); scheduler(); try_wake(); unblock_one() in sync
didn't change in put_current_running() block()



